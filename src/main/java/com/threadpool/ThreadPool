线程池
1.new Thread 弊端
    1.1 每次new Thread新建对象，性能差
    1.2 线程缺乏统一管理，可能无限制的新建线程，相互竞争，有可能占用过多系统资源导致死机或OOM
    1.3 缺少更多功能，如更多执行、定期执行、线程中断
2.线程池的好处
    2.1 重用存在的线程，减少对象创建、消亡的开销，性能差
    2.2 可有效控制最大并发线程数，提高系统资源利用率，同时可以避免过多资源竞争，避免阻塞】
    2.3 提供定时执行、定期执行、单线程、并发数控制等功能
3.ThreadPoolExecutor
    corePoolSize:核心线程数量
    maximumPoolSize：线程最大线程数
    workQueue：阻塞队列，存储等待执行的任务，很重要，会对线程池运行过程产生重大影响
    keepAliveTime:线程没有任务执行时最多保持多久时间终止
    unit：keepAliveTime的时间单位
    threadFactory：线程工厂，用来创建线程
    rejectHandler：当拒绝处理任务时的策略
    如果当前线程数<corePoolSize,则创建新的线程去执行任务
4.线程的五种状态
    running
        调用shutdown() 进入到shutdown状态
        调用shutdownNow() 进入到stop状态
    shutdown 阻塞队列为空,线程池中的工作线程数量为0会进入到tidying状态
    stop 线程池中的工作线程数量为0 进入到tidying状态
    tidying 调用terminated()进入terminated状态
    terminated
    execute()：提交任务，交给线程池执行
    submit()：提交任务，能够返回执行结果 execute+Future
    shutdown():关闭线程池，等待任务都执行完
    shutdownNow():关闭线程池，不等待任务执行完
    getTaskCount():线程池已执行和未执行的任务总数
    getCompletedTaskCount():已完成的任务数量
    getPoolSize():线程池当前的线程数量
    getActiveCount():当前线程池中正在执行任务的线程数量
5.Executor框架接口
    5.1.Executors.newCachedThreadPool
        创建一个可缓存的线程池，如果线程池的长度超过了处理的需要，可以灵活回收空闲线程
        如果没有可以回收的，就新建线程
    5.2.Executors.newFixedThreadPool
        创建一个定长的线程池，可以控制线程的最大并发数，超过的线程会在队列中等待
    5.3.Executors.newScheduledThreadPool
        创建一个定长的线程池，支持定时和周期性的任务执行
    5.4.Executors.newSingleThreadPool
        创建一个单线程化的线程池，只会用唯一的一个工作线程执行任务
6.线程池的合理配置
    1.CPU密集型任务,就需要尽量压榨CPU,参考值可以设为NCPU+1
    2.IO密集型任务,参考值可以设置为2*NCPU

